#include "mbed.h"
#include "keypad.h"
#include <string>
#include <cstdlib> // For rand() and srand()
#include <ctime>   // For time()
#include <sstream> // For std::stringstream
#include "TextLCD.h"

TextLCD MyLCD2(D2, D3, D4, D5, D6, D7);
TextLCD MyLCD(D8, D9, D10, D11, D12, PC_5);
DigitalOut ledA(PC_8);
DigitalOut ledB(PC_6);
DigitalOut ledC(PC_9);
DigitalOut ledD(PB_13);
DigitalOut ledE(PC_4);
DigitalOut ledF(PC_10);
DigitalOut ledG(PC_11);
DigitalOut ledH(PC_12);
DigitalOut alarm(D15);
DigitalOut redLED(D14);
DigitalOut greenLED(D13);

std::string correctPassword = "1234";  // Initial password
int token;
const int maxTokenAttempts = 3;
const int rotationInterval = 5; // Interval in seconds for token rotation
const int minPasswordLength = 6; // Minimum password length
const int maxPasswordLength = 16; // Maximum password length
const int lockoutDuration = 3;  // Lockout duration in seconds
const int unlockDuration = 10;  // Duration in seconds for the door to remain unlocked

std::string intToString(int value) {
    std::stringstream ss;
    ss << value;
    return ss.str();
}

void one() {
    ledA = 1;
    ledB = 0;
    ledC = 0;
    ledD = 1;
    ledE = 1;
    ledF = 1;
    ledG = 1;
    ledH = 1;
}

void two() {
    ledA = 0;
    ledB = 0;
    ledC = 1;
    ledD = 0;
    ledE = 0;
    ledF = 1;
    ledG = 0;
    ledH = 1;
}

void three() {
    ledA = 0;
    ledB = 0;
    ledC = 0;
    ledD = 0;
    ledE = 1;
    ledF = 1;
    ledG = 0;
    ledH = 1;
}

void clear7Segment() {
    ledA = 1;
    ledB = 1;
    ledC = 1;
    ledD = 1;
    ledE = 1;
    ledF = 1;
    ledG = 1;
    ledH = 1;
}

void generateToken() {
    token = rand() % 9000 + 1000; // Generate a random 4-digit token
}

void displayToken() {
    MyLCD2.cls();
    MyLCD2.printf("MFA code:\n%d", token);
}

void displayPasswordAttemptsLeft(int attemptsLeft) {
    switch (attemptsLeft) {
        case 3:
            three();
            break;
        case 2:
            two();
            break;
        case 1:
            one();
            break;
        default:
            clear7Segment();
            break;
    }
}

void displayTokenAttemptsLeft(int attemptsLeft) {
    switch (attemptsLeft) {
        case 3:
            three();
            break;
        case 2:
            two();
            break;
        case 1:
            one();
            break;
        default:
            clear7Segment();
            break;
    }
}

void clearTokenDisplay2() {
    MyLCD2.cls(); // Clear the token display
}

void clearTokenDisplay1() {
    MyLCD.cls(); // Clear the token display
}

void promptPasswordCreation(std::string &newPassword, Keypad &keypad) {
    std::string inputPassword1;
    std::string inputPassword2;
    char key;

    MyLCD.cls();
    MyLCD.printf("Set Password:\n");

    // Clear the 7-segment display during password creation
    clear7Segment();

    while (1) {
        key = keypad.getKey();
        if (key != KEY_RELEASED) {
            if (key == '#') {
                if (newPassword.length() < minPasswordLength) {
                    MyLCD.cls();
                    MyLCD.printf("Password\nToo Short\n");
                    wait(2);
                    MyLCD.cls();
                    MyLCD.printf("Set Password:\n");
                    inputPassword1.clear();
                    inputPassword2.clear();
                    newPassword.clear();
                } else if (inputPassword1.empty()) {
                    inputPassword1 = newPassword;
                    MyLCD.cls();
                    MyLCD.printf("Confirm Password:\n");
                    newPassword.clear();
                } else {
                    inputPassword2 = newPassword;
                    if (inputPassword1 == inputPassword2) {
                        correctPassword = inputPassword1;
                        MyLCD.cls();
                        MyLCD.printf("Password Set\n");
                        wait(2);
                        MyLCD.cls();
                        return;
                    } else {
                        MyLCD.cls();
                        MyLCD.printf("Passwords \nDo Not Match\n");
                        wait(2);
                        MyLCD.cls();
                        MyLCD.printf("Set Password:\n");
                        inputPassword1.clear();
                        inputPassword2.clear();
                        newPassword.clear();
                    }
                }
            } else if (key == '*') {
                if (!newPassword.empty()) {
                    newPassword.resize(newPassword.size() - 1);
                }
            } else if (newPassword.length() < maxPasswordLength) {
                newPassword += key;
            }
            MyLCD.locate(0, 1);
            MyLCD.printf("%-16s", newPassword.c_str());
            wait(0.3);
        }
    }
}

void lockout() {
    MyLCD.cls();
    MyLCD.printf("Locked out\n");
    alarm = 1;
    redLED = 1;
    greenLED = 0;
    wait(2);
    alarm = 0;
    redLED = 1;
    greenLED = 0;
    wait(lockoutDuration);
    MyLCD.cls();
    //MyLCD.printf("Incorrect\nPassword");
    //wait(2);
    //MyLCD.cls();
    //MyLCD.printf("Password:\n");
}

void lockDoor() {
    redLED = 1;
    greenLED = 0;
    MyLCD.cls();
    MyLCD.printf("Door Locked\n");
    wait(2);
}

void resetAttempts(int &incorrectAttempts, int &tokenAttempts) {
    incorrectAttempts = 0;
    tokenAttempts = 0;
}

int main() {
    // Keypad setup: c0   c1   c2   c3  r0   r1   r2   r3    
    Keypad keypad(PC_3, PC_2, PA_0, PA_1, PA_4, PB_0, PC_1, PC_0);
        
    // Enable pull-up resistors for the keypad
    keypad.enablePullUp();

    // Initialize random seed
    srand(time(NULL));

    // Buffer to store the input word
    std::string inputWord;
    std::string inputToken;

    // Variable to store the key pressed
    char key;

    // Counters for incorrect attempts
    int incorrectAttempts = 0;
    int tokenAttempts = 0;

    // Maximum allowed incorrect attempts
    const int maxIncorrectAttempts = 3;

    // Timer for token rotation
    Timer rotationTimer;

    // Set red LED on by default
    redLED = 1;
    greenLED = 0;

    // Prompt the user to set a new password
    promptPasswordCreation(inputWord, keypad);
    inputWord.clear();

    while (1) {
        // Clear the token display before password input
        clearTokenDisplay2();

        // Inform the user to touch a key on the keypad
        MyLCD.cls();
        MyLCD.printf("Password:\n");

        // Display remaining password attempts
        displayPasswordAttemptsLeft(maxIncorrectAttempts - incorrectAttempts);

        while (1) {
            key = keypad.getKey();
            
            if (key != KEY_RELEASED) {
                if (key == '#') {
                    if (inputWord == correctPassword) {
                        MyLCD.cls();
                        MyLCD.printf("Password Correct\n");
                        wait(2);

                        // Clear 7-segment display before showing the token
                        clear7Segment();

                        // Reset token attempts and display token attempts
                        tokenAttempts = 0;
                        displayTokenAttemptsLeft(maxTokenAttempts - tokenAttempts);

                        // Start rotating token after password is correct
                        rotationTimer.start();
                        generateToken(); // Generate initial token
                        displayToken();  // Display the initial token

                        // Proceed to token input
                        MyLCD.cls();
                        MyLCD.printf("MFA code:\n");

                        // Clear input token buffer
                        inputToken.clear();

                        while (1) {
                            if (rotationTimer.read() >= rotationInterval) {
                                generateToken();
                                displayToken();
                                rotationTimer.reset(); // Reset the token rotation timer
                            }

                            key = keypad.getKey();
                            if (key != KEY_RELEASED) {
                                if (key == '#') {
                                    if (inputToken == intToString(token)) {
                                        MyLCD.cls();
                                        inputWord.clear();
                                        clear7Segment();
                                         // Turn off red LED and turn on green LED
                                        redLED = 0;
                                        greenLED = 1;
                                        MyLCD.printf("Unlocked\n");
                                        MyLCD2.cls();
                                        wait(2);
                                        MyLCD.cls();
                                        MyLCD.printf("Welcome back\n");
                                        wait(2);

                                        // Clear token display after unlocking
                                        clearTokenDisplay1();
                                        clearTokenDisplay2();
                                        clear7Segment();

                                        wait(unlockDuration); // Wait for the unlock duration
                                        lockDoor(); // Lock the door after the delay
                                        
                                        resetAttempts(incorrectAttempts, tokenAttempts); // Reset attempts after successful entry

                                        break; // Exit the main loop if unlocked
                                    } else {
                                        tokenAttempts++; // Increment the token attempts counter
                                        MyLCD.cls();
                                        MyLCD.printf("Incorrect Token\n");
                                        wait(2);
                                        MyLCD.cls();
                                        MyLCD.printf("MFA token:\n");

                                        // Clear input token buffer
                                        inputToken.clear();

                                        if (tokenAttempts >= maxTokenAttempts) {
                                            lockout(); // Call lockout function
                                            incorrectAttempts = 0; // Reset the password attempts counter
                                            tokenAttempts = 0;     // Reset the token attempts counter
                                            inputWord.clear();     // Clear input word buffer
                                            break;
                                        }
                                    }
                                    inputToken.clear();
                                } else if (key == '*') {
                                    if (!inputToken.empty()) {
                                        inputToken.resize(inputToken.size() - 1);
                                    }
                                } else {
                                    inputToken += key;
                                }
                                MyLCD.locate(0, 1);
                                MyLCD.printf("%-16s", inputToken.c_str());
                                displayTokenAttemptsLeft(maxTokenAttempts - tokenAttempts);
                                wait(0.3);
                            }
                        }

                        // Break out of the password input loop after token phase
                        if (tokenAttempts < maxTokenAttempts) {
                            break;
                        }
                    } else {
                        incorrectAttempts++; // Increment the password attempts counter
                        MyLCD.cls();
                        MyLCD.printf("Incorrect\nPassword\n");
                        wait(2);
                        MyLCD.cls();
                        MyLCD.printf("Password:\n");

                        if (incorrectAttempts >= maxIncorrectAttempts) {
                            lockout(); // Call lockout function
                            incorrectAttempts = 0; // Reset the password attempts counter
                            tokenAttempts = 0;     // Reset the token attempts counter
                            inputWord.clear();     // Clear input word buffer
                            MyLCD.printf("Password:\n");     
                            break;
                        }
                    }
                    inputWord.clear();
                } else if (key == '*') {
                    if (!inputWord.empty()) {
                        inputWord.resize(inputWord.size() - 1);
                    }
                } else if (inputWord.length() < maxPasswordLength) {
                    inputWord += key;
                }

                // Display actual character and then replace with asterisk after a delay
                MyLCD.locate(0, 1);
                MyLCD.printf("%-16s", inputWord.c_str());
                wait(0.3); // Short delay to show actual character
                MyLCD.locate(0, 1);
                std::string displayPassword(inputWord.length(), '*');
                MyLCD.printf("%-16s", displayPassword.c_str());

                displayPasswordAttemptsLeft(maxIncorrectAttempts - incorrectAttempts);
                wait(0.3);
            }
        }
    }
}
